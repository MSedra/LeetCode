
class Solution
{
public:
  vector<bool> visited;
  map<Node *, Node *> clonedNode;
  void dfs(Node *node, Node *&curr)
  {
    visited[node->val] = true;
    for (auto vv : node->neighbors)
    {
      Node *newNode;
      if (clonedNode[vv])
        newNode = clonedNode[vv];
      else
      {
        newNode = new Node(vv->val);
        clonedNode[vv] = newNode;
      }
      curr->neighbors.push_back(newNode);
      if (!visited[vv->val])
        dfs(vv, newNode);
    }
  }
  Node *cloneGraph(Node *node)
  {
    if (!node)
      return NULL;
    Node *clonedGraph = new Node(1);
    clonedNode.clear();
    clonedNode[node] = clonedGraph;
    visited.resize(105, false);
    dfs(node, clonedGraph);
    return clonedGraph;
  }
};
