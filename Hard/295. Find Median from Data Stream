#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ordered_set tree<pair<int,int>, null_type,less<pair<int,int>>, rb_tree_tag,tree_order_statistics_node_update>

class MedianFinder {
    ordered_set tree;
    unordered_map<int, int> val_last_ind;
public:
    MedianFinder() {

    }
    
    void addNum(int num) {
        if(val_last_ind.find(num)==val_last_ind.end())
            val_last_ind[num] = 0;
        int &num_last_ind = val_last_ind[num]; 
        ++num_last_ind;
        tree.insert({num, num_last_ind});
    }
    
    double findMedian() {
        int nums_count = tree.size();
        bool isCountOdd = nums_count&1;
        int first_ind = (nums_count>>1) - (!isCountOdd);
        if(isCountOdd)
            return tree.find_by_order(first_ind)->first;
        int second_ind = first_ind + 1;    
        return (tree.find_by_order(first_ind)->first + tree.find_by_order(second_ind)->first)/2.0;
    }
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
