/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(head == NULL)
            return NULL;
        unordered_map<Node*, Node*> orgToNew;
        Node *temp = head, *newHead;
        while(temp){
            Node* newNode = new Node(temp->val);
            orgToNew[temp] = newNode;
            temp = temp->next;
        }
        newHead = orgToNew[head];
        temp = head;
        while(temp){
            Node* correspondingNode = orgToNew[temp];
            if(temp->next)
                correspondingNode->next = orgToNew[temp->next];
            if(temp->random)
                correspondingNode->random = orgToNew[temp->random];    
            temp = temp->next;    
        }
        return newHead;
    }
};
