class Solution {
    int binary_search_first(vector<int> &nums, int target){
        if(nums.empty())
            return -1;
        int lo = 0;
        int hi = nums.size()-1;
        while(lo!=hi){
            int mid = lo + (hi-lo) / 2;
            if(target <= nums[mid])
                hi = mid;
            else 
                lo = mid + 1;
        }
        return (nums[lo] == target ? lo : -1);
    }
    int binary_search_last(vector<int> &nums, int target){
        if(nums.empty())
            return -1;
        int lo = 0;
        int hi = nums.size()-1;
        while(lo!=hi){
            int mid = lo + (hi-lo+1) / 2;
            if(target >= nums[mid])
                lo = mid;
            else 
                hi = mid - 1;
        }
        return (nums[lo] == target ? lo : -1);
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        return {binary_search_first(nums, target), binary_search_last(nums, target)};
    }
};
