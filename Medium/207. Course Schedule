class Solution
{
public:
  int MAX;
  vector<bool> visited, instack;
  vector<vector<int>> Graph;
  int dfs(int v)
  {
    visited[v] = instack[v] = true;
    int res = 0;
    for (auto vv : Graph[v])
      if (!visited[vv])
        res |= dfs(vv);
      else if (instack[vv])
        return 1;
    instack[v] = false;
    return res;
  }
  bool canFinish(int numCourses, vector<vector<int>> &prerequisites)
  {
    bool ans = true;
    for (auto vec : prerequisites)
      for (auto num : vec)
        MAX = max(MAX, num);
    ++MAX;
    Graph.resize(MAX);
    visited.resize(MAX);
    instack.resize(MAX);
    for (auto vec : prerequisites)
      Graph[vec[0]].push_back(vec[1]);
    for (int i = 0; i < MAX; ++i)
      if (!visited[i] && dfs(i))
      {
        ans = false;
        break;
      }
    return ans;
  }
};
