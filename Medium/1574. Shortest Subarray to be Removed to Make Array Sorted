class Solution {
    bool isValid(int &subarrayLength, int &longestSortedPrefix, int &longestSortedSuffix, vector<int> &arr)
    {
        if(subarrayLength == arr.size()-1)
            return true;
        if(!subarrayLength)
            return is_sorted(arr.begin(), arr.end());
        for(int i=0 ; i<arr.size()-subarrayLength+1 ; ++i){
            int l = i;
            int r = i + subarrayLength - 1;
            if(l<=longestSortedPrefix && r>=(int)arr.size()-longestSortedSuffix-1 && (!l || r==arr.size()-1 || arr[r+1]>=arr[l-1]))
                return true;
        }       
        return false;
    }
    int getShortestSubarrayLength(vector<int> &arr, int &longestSortedPrefix, int &longestSortedSuffix){
        int l = 0, r = arr.size() - 1;
        while(l<r){
            int mid = l + (r-l)/2;
            if(isValid(mid, longestSortedPrefix, longestSortedSuffix, arr))
                r = mid;
            else 
                l = mid+1;
        }
        return l;
    }
    void getLongestSortedPrefix(vector<int> &arr, int &longestSortedPrefix){
        longestSortedPrefix = 1;
        for(int i=1 ; i<arr.size() ; ++i)
        {
                if(arr[i]<arr[i-1])
                    break;
                ++longestSortedPrefix;
        }
    }
    void getLongestSortedSuffix(vector<int> &arr, int &longestSortedSuffix){
        longestSortedSuffix = 1;
        for(int i=arr.size()-2 ; ~i ; --i)
        {
            if(arr[i]>arr[i+1])
                break;
            ++longestSortedSuffix; 
        }    
    }
public:
    int findLengthOfShortestSubarray(vector<int>& arr) {
        int longestSortedPrefix, longestSortedSuffix;
        getLongestSortedPrefix(arr, longestSortedPrefix);
        getLongestSortedSuffix(arr, longestSortedSuffix);
        return getShortestSubarrayLength(arr, longestSortedPrefix, longestSortedSuffix);
    }
};
