class RandomizedSet {
    vector<int> nums;
    unordered_map<int,int> num_ind;
public:
    RandomizedSet() {
        
    }
    
    bool insert(int val) {
        if(num_ind.find(val)!=num_ind.end())
            return false;
        nums.push_back(val);
        num_ind[val] = nums.size()-1;
        return true;
    }
    
    bool remove(int val) {
        if(num_ind.find(val)==num_ind.end())
           return false;
        unordered_map<int,int>::iterator val_it = num_ind.find(val);
        int val_ind = val_it->second;
        swap(nums[val_ind], nums.back());
        nums.pop_back();
        num_ind.erase(val_it);
        if(val_ind<nums.size())
            num_ind[nums[val_ind]] = val_ind;
        return true;    
    }
    
    int getRandom() {
        int random_ind = rand()%nums.size();
        return nums[random_ind];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
