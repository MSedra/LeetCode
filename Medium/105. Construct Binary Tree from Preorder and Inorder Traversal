/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    TreeNode* buildTree(int &preorderInd, int inorderLeft, int inorderRight, const vector<int> &preorder, const vector<int> &inorder, const unordered_map<int,int> &pos){
        if(inorderLeft>inorderRight)
            return NULL;
        int newNodeVal = preorder[preorderInd++];
        TreeNode* newNode = new TreeNode(newNodeVal);
        newNode->left = buildTree(preorderInd, inorderLeft, pos.at(newNodeVal)-1, preorder, inorder, pos);
        newNode->right = buildTree(preorderInd, pos.at(newNodeVal)+1, inorderRight, preorder, inorder, pos);
        return newNode;    
    }
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        unordered_map<int,int> pos;
        for(int i=0 ; i<inorder.size() ; ++i)
            pos[inorder[i]] = i;
        int preorderInd = 0;    
        return buildTree(preorderInd, 0, (int)inorder.size()-1, preorder, inorder, pos);    
    }
};
