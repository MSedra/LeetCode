class Solution {
    const int maxNum = 9;
    bool isValid(int row1, int row2, int col1, int col2, vector<vector<char>>& board){
        vector<bool> exists(maxNum);
        for(int i=row1 ; i<=row2 ; ++i)
            for(int j=col1 ; j<=col2 ; ++j){
                if(board[i][j]=='.')
                    continue;
                if(exists[board[i][j]-'1'])
                    return false;
                else 
                   exists[board[i][j]-'1'] = true;
            }
        return true;            
    }
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int rows = board.size();
        int cols = board[0].size();
        vector<pair<int,int>> grids;
        for(int i=0 ; i<rows ; i+=3)
            grids.push_back({i, i+2});    
        for(int i=0 ; i<rows ; ++i)
            if(!isValid(i, i, 0, cols-1, board))
                return false;
        for(int i=0 ; i<cols ; ++i)
            if(!isValid(0, rows-1, i, i, board))
                return false;    
        for(auto row : grids)
            for(auto col : grids)
                if(!isValid(row.first, row.second, col.first, col.second, board))
                    return false;
        return true;            
    }
};
