/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        bool evenDepth = 1;
        deque<TreeNode*> nodes;   
        vector<vector<int>> result;
        if(root)
            nodes.push_back(root);
        while(!nodes.empty()){
            int depthCount = nodes.size();
            result.push_back(vector<int>());
            while(depthCount--){
                TreeNode* currentNode = (evenDepth? nodes.front() : nodes.back());
                if(evenDepth)
                    nodes.pop_front();
                else 
                    nodes.pop_back();
                result.back().push_back(currentNode->val);
                if(evenDepth){
                    if(currentNode->left)
                        nodes.push_back(currentNode->left);
                    if(currentNode->right)    
                        nodes.push_back(currentNode->right);
                }
                else{
                    if(currentNode->right)
                        nodes.push_front(currentNode->right);
                    if(currentNode->left)    
                        nodes.push_front(currentNode->left);
                }
            }
            evenDepth = !evenDepth;
        }
        return result;
    }
};
