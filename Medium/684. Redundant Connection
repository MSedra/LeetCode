class Solution
{
public:
  vector<vector<int>> Graph;
  vector<int> ans;
  vector<bool> visited;
  vector<bool> inCycle;
  int root;
  bool dfs(int v, int par)
  {
    visited[v] = true;
    for (auto vv : Graph[v])
      if (!visited[vv])
      {
        bool bol = dfs(vv, v);
        if (bol)
        {
          inCycle[v] = true;
          if (v == root)
            return false;
          return true;
        }
      }
      else if (vv != par)
      {
        inCycle[v] = true;
        root=vv;
        return true;
      }
    return false;
  }
  vector<int> findRedundantConnection(vector<vector<int>> &edges)
  {
      int N=edges.size();
      Graph.resize(N+5);
      visited.resize(N+5);
      inCycle.resize(N+5);
      root=-1;
      for(auto vec : edges)
          Graph[vec[0]].push_back(vec[1]),Graph[vec[1]].push_back(vec[0]);
      dfs(1,-1);
      for(int i=N-1 ; i>=0 ; --i)
        if(inCycle[edges[i][0]] && inCycle[edges[i][1]]){
            ans={edges[i][0],edges[i][1]};
            break;
        }
      return ans;
  }
};
